package com.netcracker.controllers;

/**
 * Данный контроллер отвечает за позиционирование и отображение
 * меток на карте и за предоставление краткой информации о метках
 * для последующих операций фильтрации/поиска.
 * Контроллер покрывает следующие юзкейсы:
 *      UC1 - Просмотр карты.
 *      UC2 - Масштабирование карты.
 *      UC3 - Просмотр краткой информации о метке.
 *
 * @author Oveian Egor
 * @author Kozhuchar Alexander
 */

public class MapController {

    /**
     * Этот метод передаёт клиенту краткую информацию о метках для отображения на карте.
     *
     * @param JSON содержащий в себе координаты двух точек NE и SW,
     *             образующих линию, которая является диоганалью
     *             прямоугольника, внутри которого будут находиться
     *             метки, необходимые клиенту для отображения на карте.
     * @return JSON содержащий в себе краткую информацию о метках,
     *             координаты которых удовлетворили заданному клиентом
     *             диапазону. Краткая информация о метке - это id,
     *             название метки и координаты.
     * Метод покрывает следующие функциональные требования:
     *      FR3 - При открытии, система должна проставлять метки на карте.
     *      FR4 - Система должна отображать несколько меток, попадающих в радиус 1 см, единым кластером.
     *      FR5 - Система должна динамически расставлять метки при их попадании в видимую область во время
     *      смены масштаба или отображаемого географического района.
     *      FR6 - Система должна скрывать метки, вышедшие из видимой области при смене масштаба или
     *      отображаемого географического района.
     */
    public void getLabelsByRect(){
    };

    /**
     * Этот метод передаёт клиенту краткую информацию о метках для фильтрации и поиска.
     *
     * @param JSON содержащий в себе координаты двух точек -
     *             координаты первой определяются пользователем, который
     *             рандомно кликает на карту. Данная точка будет являться центром
     *             окружности, радиус которой будет задаваться на стороне клиента, но уже
     *             системой. Координаты центра окружности и радиуса будут переданы в
     *             контроллер для следующих операций:
     *                  1) По координатам будет выстроен квадрат, внутри которого будут находиться
     *                  метки.
     *                  2) Будет измерено расстояние от центра окружности для каждой точки, вошедшей
     *                  в квадрат, и откинуты те, расстояние до которых больше радиуса.
     * @return JSON содержащий в себе краткую информацию о метках,
     *             координаты которых удовлетворили заданному клиентом
     *             диапазону. Краткая информация о метке - это id,
     *             название метки, дата создания, рейтинг, гиперссылку и координаты.
     * Метод покрывает следующие функциональные требования:
     *      FR10 - Система должна формировать список, содержащий краткую информацию и гиперссылку
     *      на просмотр полной информации о метке.
     *      FR11 - Система должна отображать список (FR 10) в окне поверх карты.
     *      FR12 - Система должна позволять сортировать список (FR 10) по рейтингу/дате создания метки.
     */
    public void getLabelsByCircle(){


    }

}
